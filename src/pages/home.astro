<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tareas</title>
    <style>
      :root {
        --primary: #7c5fff;
        --primary-light: #9e8aff;
        --primary-dark: #5a3ce8;
        --danger: #ff4757;
        --success: #2ed573;
        --warning: #ffa502;
        --info: #1e90ff;
        --dark-gray: #2f3542;
        --darker-gray: #1e2029;
        --light-gray: #f1f2f6;
        --text-light: #ffffff;
        --text-muted: #a4b0be;
        --bg-dark: #121218;
        --card-bg: #1e1e2a;
        --card-hover: #252533;
      }

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        background-color: var(--bg-dark);
        color: var(--text-light);
        font-family:
          "Inter",
          -apple-system,
          BlinkMacSystemFont,
          "Segoe UI",
          Roboto,
          Oxygen,
          Ubuntu,
          Cantarell,
          sans-serif;
        line-height: 1.6;
        padding: 0;
        margin: 0;
        min-height: 100vh;
      }

      /* Layout principal */
      .app {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1.5rem;
      }

      /* Encabezado */
      .header {
        text-align: center;
        margin-bottom: 2.5rem;
        position: relative;
        padding-bottom: 1.5rem;
      }

      .header__title {
        font-size: 2.5rem;
        margin-bottom: 0.75rem;
        color: var(--text-light);
        font-weight: 700;
        letter-spacing: -0.5px;
      }

      .header__subtitle {
        color: var(--text-muted);
        margin-bottom: 1.5rem;
        font-size: 1.1rem;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
      }

      /* Botones */
      .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        transition: all 0.2s ease;
        font-size: 0.95rem;
        letter-spacing: normal;
      }

      .btn--primary {
        background-color: var(--primary);
        color: white;
      }

      .btn--primary:hover {
        background-color: var(--primary-light);
        transform: translateY(-1px);
      }

      .btn--primary:active {
        background-color: var(--primary-dark);
        transform: translateY(0);
      }

      .btn--outline {
        background-color: transparent;
        color: var(--primary);
        border: 2px solid var(--primary);
      }

      .btn--outline:hover {
        background-color: rgba(124, 95, 255, 0.1);
      }

      .btn--danger {
        background-color: var(--danger);
        color: white;
      }

      .btn--danger:hover {
        background-color: #ff6b81;
      }

      .btn--text {
        background: transparent;
        color: var(--text-muted);
        padding: 0.5rem;
      }

      .btn--text:hover {
        color: var(--text-light);
        background: rgba(255, 255, 255, 0.05);
      }

      /* CÃ­rculo de perfil */
      .profile {
        position: absolute;
        right: 0;
        top: 0;
        width: 42px;
        height: 42px;
        border-radius: 50%;
        overflow: hidden;
        cursor: pointer;
        transition: all 0.2s ease;
        border: 2px solid var(--primary);
      }

      .profile:hover {
        transform: scale(1.05);
        box-shadow: 0 0 0 3px rgba(124, 95, 255, 0.3);
      }

      .profile__img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      .profile--large {
        width: 100px;
        height: 100px;
        margin: 0 auto 1rem;
        border: 3px solid white;
      }

      /* Objetivo semanal */
      .goal {
        background: var(--card-bg);
        padding: 1.5rem;
        border-radius: 12px;
        margin: 2rem auto;
        max-width: 600px;
        border-left: 4px solid var(--warning);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      }

      .goal__header {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 1rem;
      }

      .goal__icon {
        font-size: 1.75rem;
        color: var(--warning);
      }

      .goal__title {
        font-size: 1.25rem;
        margin-bottom: 0.5rem;
      }

      .goal__reward {
        color: var(--warning);
        font-style: italic;
        margin-top: 0.5rem;
        font-weight: 500;
      }

      .goal__progress-container {
        margin-top: 1.5rem;
      }

      .goal__progress-label {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
      }

      .goal__progress-bar {
        height: 10px;
        background: var(--darker-gray);
        border-radius: 5px;
        overflow: hidden;
      }

      .goal__progress {
        height: 100%;
        background: linear-gradient(
          90deg,
          var(--primary),
          var(--primary-light)
        );
        width: 0%;
        transition: width 0.5s ease;
        border-radius: 5px;
      }

      /* Resumen de usuarios */
      .users {
        background: var(--card-bg);
        padding: 1.5rem;
        border-radius: 12px;
        margin: 2rem 0;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      }

      .users__title {
        margin-bottom: 1.5rem;
        font-size: 1.25rem;
        color: var(--primary);
      }

      .users__table {
        width: 100%;
        border-collapse: collapse;
      }

      .users__table th,
      .users__table td {
        padding: 0.75rem;
        text-align: left;
        border-bottom: 1px solid var(--darker-gray);
      }

      .users__table th {
        color: var(--text-muted);
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.8rem;
        letter-spacing: 0.5px;
      }

      .users__table tr:last-child td {
        border-bottom: none;
      }

      .users__table tr:hover td {
        background: rgba(124, 95, 255, 0.05);
      }

      .users__cell {
        display: flex;
        align-items: center;
        gap: 0.75rem;
      }

      .users__avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid var(--primary);
      }

      .users__avatar--small {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        vertical-align: middle;
        margin-right: 8px;
        border: 1px solid var(--primary);
      }

      .users__progress {
        height: 8px;
        background: var(--darker-gray);
        border-radius: 4px;
        width: 100px;
        display: inline-block;
        overflow: hidden;
      }

      .users__progress-bar {
        height: 100%;
        background: linear-gradient(90deg, var(--primary), var(--success));
        border-radius: 4px;
      }

      /* Contenedor de listas */
      .lists {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
      }

      .list {
        background: var(--card-bg);
        padding: 1.5rem;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.3s ease;
        border-left: 4px solid var(--primary);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        position: relative;
        overflow: hidden;
      }

      .list:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        background: var(--card-hover);
      }

      .list::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: var(--primary);
      }

      .list__header {
        display: flex;
        align-items: flex-start;
        margin-bottom: 1rem;
      }

      .list__icon {
        font-size: 1.5rem;
        margin-right: 0.75rem;
        color: var(--primary);
      }

      .list__title {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
        flex-grow: 1;
      }

      .list__desc {
        color: var(--text-muted);
        font-size: 0.9rem;
        margin-bottom: 1rem;
      }

      .list__footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 1.5rem;
      }

      .list__stats {
        display: flex;
        gap: 1rem;
      }

      .list__stat {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        font-size: 0.85rem;
      }

      .list__stat--pending {
        color: var(--warning);
      }

      .list__stat--completed {
        color: var(--success);
      }

      /* Contenedor de tareas */
      .tasks {
        display: none;
        margin-bottom: 5rem;
        animation: fadeIn 0.3s ease;
      }

      .tasks__header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
      }

      .tasks__title {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--text-light);
      }

      .tasks__back-btn {
        background: var(--darker-gray);
        color: var(--text-light);
        border: none;
        padding: 0.75rem 1.25rem;
        border-radius: 8px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.2s ease;
      }

      .tasks__back-btn:hover {
        background: var(--dark-gray);
      }

      .tasks__list {
        background: var(--card-bg);
        padding: 1.5rem;
        border-radius: 12px;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }

      .tasks__status {
        display: flex;
        justify-content: space-between;
        background: var(--darker-gray);
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        font-size: 0.9rem;
      }

      .tasks__status .completed {
        color: var(--success);
        font-weight: 600;
      }

      .tasks__status .pending {
        color: var(--warning);
        font-weight: 600;
      }

      .task {
        background: var(--darker-gray);
        padding: 1.25rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        border-left: 4px solid var(--primary);
        transition: all 0.2s ease;
        position: relative;
      }

      .task:hover {
        transform: translateX(5px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      }

      .task--completed {
        opacity: 0.8;
        border-left-color: var(--success);
        background: rgba(46, 213, 115, 0.05);
      }

      .task--completed::after {
        content: "â";
        position: absolute;
        right: 1rem;
        top: 1rem;
        color: var(--success);
        font-weight: bold;
        font-size: 1.2rem;
      }

      .task__header {
        display: flex;
        align-items: center;
        margin-bottom: 0.5rem;
      }

      .task__checkbox {
        width: 20px;
        height: 20px;
        margin-right: 0.75rem;
        cursor: pointer;
        accent-color: var(--primary);
      }

      .task__title {
        font-weight: 600;
        margin: 0;
        flex-grow: 1;
        font-size: 1.1rem;
      }

      .task__title--completed {
        text-decoration: line-through;
        color: var(--text-muted);
      }

      .task__priority {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }

      .task__priority--low {
        background: rgba(46, 213, 115, 0.2);
        color: var(--success);
      }

      .task__priority--normal {
        background: rgba(30, 144, 255, 0.2);
        color: var(--info);
      }

      .task__priority--high {
        background: rgba(255, 165, 2, 0.2);
        color: var(--warning);
      }

      .task__priority--urgent {
        background: rgba(255, 71, 87, 0.2);
        color: var(--danger);
      }

      .task__desc {
        margin: 0.75rem 0;
        font-size: 0.95rem;
        color: var(--text-muted);
        line-height: 1.5;
      }

      .task__meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.85rem;
        margin-top: 1rem;
      }

      .task__assigned {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background: rgba(124, 95, 255, 0.1);
        padding: 0.35rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
      }

      .task__due-date {
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        color: var(--warning);
        font-weight: 500;
      }

      .task__created {
        color: var(--text-muted);
        font-size: 0.8rem;
      }

      .task__actions {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
      }

      .task__actions button {
        border: none;
        padding: 0.5rem 0.75rem;
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.8rem;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.25rem;
        transition: all 0.2s ease;
        background: rgba(255, 255, 255, 0.05);
        color: var(--text-light);
      }

      .task__actions button:hover {
        background: rgba(255, 255, 255, 0.1);
        transform: translateY(-1px);
      }

      /* BotÃ³n flotante */
      .fab {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        background-color: var(--primary);
        color: white;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        cursor: pointer;
        box-shadow: 0 4px 20px rgba(124, 95, 255, 0.3);
        transition: all 0.3s ease;
        border: none;
        z-index: 10;
      }

      .fab:hover {
        transform: scale(1.1) translateY(-5px);
        box-shadow: 0 8px 25px rgba(124, 95, 255, 0.4);
      }

      /* Modales */
      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        backdrop-filter: blur(5px);
        justify-content: center;
        align-items: center;
        z-index: 1000;
        animation: fadeIn 0.3s ease;
      }

      .modal__content {
        background: var(--card-bg);
        padding: 2rem;
        border-radius: 16px;
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.05);
        animation: slideUp 0.3s ease;
      }

      .modal__header {
        margin-bottom: 1.5rem;
      }

      .modal__title {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
      }

      .modal__body {
        margin-bottom: 2rem;
      }

      .form__group {
        margin-bottom: 1.5rem;
      }

      .form__label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: var(--text-light);
      }

      .form__control {
        width: 100%;
        padding: 0.75rem 1rem;
        border-radius: 8px;
        border: 1px solid var(--darker-gray);
        background: var(--bg-dark);
        color: var(--text-light);
        font-family: inherit;
        font-size: 0.95rem;
        transition: all 0.2s ease;
      }

      .form__control:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(124, 95, 255, 0.2);
      }

      .form__select {
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%237c5fff' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 16px 12px;
      }

      .form__textarea {
        min-height: 100px;
        resize: vertical;
      }

      .modal__buttons {
        display: flex;
        justify-content: flex-end;
        gap: 0.75rem;
        margin-top: 1.5rem;
      }

      /* Modal de perfil */
      .profile-modal__content {
        width: 90%;
        max-width: 400px;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
      }

      .profile-modal__header {
        padding: 2rem;
        background: linear-gradient(
          135deg,
          var(--primary),
          var(--primary-dark)
        );
        text-align: center;
        color: white;
      }

      .profile-modal__name {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
      }

      .profile-modal__email {
        font-size: 0.9rem;
        opacity: 0.9;
      }

      .profile-modal__stats {
        display: flex;
        justify-content: center;
        gap: 2rem;
        margin: 1.5rem 0;
      }

      .profile-modal__stat {
        text-align: center;
      }

      .profile-modal__stat-value {
        font-weight: 700;
        font-size: 1.5rem;
        color: white;
      }

      .profile-modal__stat-label {
        font-size: 0.8rem;
        opacity: 0.9;
        color: white;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }

      .profile-modal__actions {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
      }

      .profile-modal__btn {
        padding: 0.9rem;
        border-radius: 8px;
        border: none;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
        transition: all 0.2s ease;
        width: 100%;
      }

      .profile-modal__btn i {
        font-size: 1.2rem;
      }

      .profile-modal__btn--contact {
        background-color: rgba(255, 255, 255, 0.9);
        color: var(--primary-dark);
      }

      .profile-modal__btn--contact:hover {
        background-color: white;
      }

      .profile-modal__btn--logout {
        background-color: rgba(255, 255, 255, 0.1);
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.2);
      }

      .profile-modal__btn--logout:hover {
        background-color: rgba(255, 255, 255, 0.2);
      }

      /* Animaciones */
      @keyframes fadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      @keyframes slideUp {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Estado vacÃ­o */
      .empty {
        text-align: center;
        padding: 3rem 1rem;
        color: var(--text-muted);
      }

      .empty__icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
      }

      .empty__title {
        font-size: 1.25rem;
        margin-bottom: 0.5rem;
        color: var(--text-light);
      }

      .empty__desc {
        margin-bottom: 1.5rem;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
      }

      /* Responsive */
      @media (max-width: 768px) {
        .app {
          padding: 1rem;
        }

        .header__title {
          font-size: 2rem;
        }

        .goal {
          padding: 1rem;
          max-width: 98vw;
        }

        .users {
          padding: 1rem;
        }

        .lists {
          grid-template-columns: 1fr;
          gap: 1rem;
        }

        .list {
          padding: 1rem;
        }

        .tasks__header {
          flex-direction: column;
          gap: 1rem;
          align-items: flex-start;
        }

        .tasks__title {
          font-size: 1.1rem;
        }

        .fab {
          bottom: 1.5rem;
          right: 1.5rem;
          width: 50px;
          height: 50px;
          font-size: 1.25rem;
        }

        .modal__content {
          padding: 1rem;
          max-width: 98vw;
        }

        .profile-modal__content {
          max-width: 95vw;
        }
      }

      @media (max-width: 480px) {
        .app {
          padding: 0.3rem;
        }

        .header {
          padding-bottom: 1rem;
        }

        .header__title {
          font-size: 1.2rem;
        }

        .header__subtitle {
          font-size: 0.9rem;
        }

        .goal {
          padding: 0.7rem;
          border-radius: 8px;
          margin: 1rem auto;
        }

        .goal__title {
          font-size: 1rem;
        }

        .goal__icon {
          font-size: 1.2rem;
        }

        .users {
          padding: 0.7rem;
          border-radius: 8px;
        }

        .users__title {
          font-size: 1rem;
        }

        .lists {
          gap: 0.7rem;
        }

        .list {
          padding: 0.7rem;
          border-radius: 8px;
        }

        .list__title {
          font-size: 1rem;
        }

        .list__desc {
          font-size: 0.8rem;
        }

        .list__stats {
          gap: 0.5rem;
        }

        .tasks__header {
          flex-direction: column;
          gap: 0.7rem;
        }

        .tasks__title {
          font-size: 1rem;
        }

        .tasks__back-btn {
          padding: 0.5rem 0.8rem;
          font-size: 0.85rem;
          border-radius: 6px;
        }

        .tasks__list {
          padding: 0.7rem;
          border-radius: 8px;
        }

        .task-item__title,
        .task__title {
          font-size: 0.95rem;
        }

        .task-item__desc,
        .task__desc {
          font-size: 0.8rem;
        }

        .task-item__priority,
        .task__priority {
          font-size: 0.7rem;
          padding: 0.15rem 0.5rem;
        }

        .task-item__meta,
        .task__meta {
          font-size: 0.7rem;
          flex-direction: column;
          gap: 0.3rem;
        }

        .task-item__actions,
        .task__actions {
          gap: 0.3rem;
        }

        .task-item__actions button,
        .task__actions button {
          font-size: 0.7rem;
          padding: 0.3rem 0.5rem;
          border-radius: 5px;
        }

        .fab {
          bottom: 1rem;
          right: 1rem;
          width: 40px;
          height: 40px;
          font-size: 1rem;
        }

        .modal__content {
          padding: 0.7rem;
          border-radius: 10px;
          max-width: 99vw;
        }

        .profile-modal__content {
          max-width: 99vw;
        }

        .profile-modal__header {
          padding: 1rem;
        }

        .profile-modal__name {
          font-size: 1.1rem;
        }

        .profile-modal__stat-value {
          font-size: 1rem;
        }

        .profile-modal__btn {
          font-size: 0.9rem;
          padding: 0.7rem;
          border-radius: 7px;
        }
      }
    </style>
  </head>
  <body>
    <div class="app">
      <div class="header">
        <!-- CÃ­rculo de perfil -->
        <div class="profile" onclick="openProfileModal()">
          <img
            id="header-profile-img"
            src="https://purina.com.pe/sites/default/files/2022-10/Que_debes_saber_antes_de_adoptar_un_gatito.jpg"
            alt="Foto de perfil"
            class="profile__img"
          />
        </div>

        <h1 class="header__title">Tareas</h1>
        <p class="header__subtitle">Â¿QuÃ© tareas querÃ©s hacer hoy?</p>

        <div class="goal">
          <div class="goal__header">
            <span class="goal__icon">ð</span>
            <div class="goal__content">
              <h3 class="goal__title">Objetivo de la semana</h3>
              <p>Completar 5 tareas</p>
              <p class="goal__reward">Premio: CafÃ© gratuito</p>
            </div>
          </div>
          <div class="goal__progress-container">
            <div class="goal__progress-label">
              <span>Progreso</span>
              <span id="progress-text">0/5 completadas</span>
            </div>
            <div class="goal__progress-bar">
              <div class="goal__progress" id="goal-progress"></div>
            </div>
          </div>
        </div>

        <div class="header__actions">
          <button class="btn btn--outline" onclick="openCategoryModal()">
            <i class="fas fa-tags"></i> Gestionar categorÃ­as
          </button>
          <button class="btn btn--danger" onclick="confirmDeleteAll()">
            <i class="fas fa-trash"></i> Borrar todas las tareas
          </button>
        </div>
      </div>

      <!-- Contenedores principales -->
      <div id="lists-container" class="lists"></div>

      <div id="tasks-container" class="tasks">
        <div class="tasks__header">
          <button class="tasks__back-btn" onclick="showLists()">
            <i class="fas fa-arrow-left"></i> Volver a listas
          </button>
          <h2 id="current-list-name" class="tasks__title"></h2>
        </div>
        <div id="tasks-list" class="tasks__list"></div>
        <button
          class="btn btn--primary"
          onclick="openTaskModal()"
          style="width: 100%; margin-top: 1.5rem;"
        >
          <i class="fas fa-plus"></i> Agregar tarea
        </button>
      </div>

      <!-- BotÃ³n flotante para agregar lista -->
      <button class="fab" onclick="openListModal()">+</button>

      <!-- Modal de perfil -->
      <div id="profileModal" class="modal">
        <div class="profile-modal__content">
          <div class="profile-modal__header">
            <div class="profile profile--large">
              <img
                id="profile-img"
                src="https://via.placeholder.com/150"
                alt="Foto de perfil"
                class="profile__img"
              />
            </div>
            <h2 id="profile-name" class="profile-modal__name">Nombre</h2>

            <div class="profile-modal__stats">
              <div class="profile-modal__stat">
                <div class="profile-modal__stat-value" id="pending-tasks-count">
                  0
                </div>
                <div class="profile-modal__stat-label">Pendientes</div>
              </div>
              <div class="profile-modal__stat">
                <div
                  class="profile-modal__stat-value"
                  id="completed-tasks-count"
                >
                  0
                </div>
                <div class="profile-modal__stat-label">Completadas</div>
              </div>
            </div>
          </div>

          <div class="profile-modal__actions">
            <button
              class="profile-modal__btn profile-modal__btn--contact"
              onclick="window.location.href='/contact'"
            >
              <i class="fas fa-envelope"></i> Contacto
            </button>

            <button
              class="profile-modal__btn profile-modal__btn--logout"
              onclick="window.location.href='/myForm'"
            >
              <i class="fas fa-sign-out-alt"></i> Cerrar sesiÃ³n
            </button>
          </div>
        </div>
      </div>
      <!-- Modal para lista de tareas -->
      <div id="listModal" class="modal">
        <div class="modal__content">
          <div class="modal__header">
            <h3 class="modal__title" id="listModalTitle">
              Agregar lista de tareas
            </h3>
          </div>
          <div class="modal__body">
            <div class="form__group">
              <label for="listTitle" class="form__label"
                >Nombre de la lista</label
              >
              <input
                id="listTitle"
                type="text"
                class="form__control"
                placeholder="Ej: Tareas del hogar"
              />
            </div>

            <div class="form__group">
              <label for="listDesc" class="form__label">DescripciÃ³n</label>
              <textarea
                id="listDesc"
                class="form__control form__textarea"
                placeholder="DescripciÃ³n opcional"></textarea>
            </div>

            <div class="form__group">
              <label for="listCategory" class="form__label">CategorÃ­a</label>
              <select id="listCategory" class="form__control form__select"
              ></select>
            </div>
          </div>

          <div class="modal__buttons">
            <button class="btn btn--text" onclick="closeListModal()"
              >Cancelar</button
            >
            <button class="btn btn--primary" onclick="saveTaskList()"
              >Guardar</button
            >
          </div>
        </div>
      </div>

      <!-- Modal para tareas -->
      <div id="taskModal" class="modal">
        <div class="modal__content">
          <div class="modal__header">
            <h3 class="modal__title" id="taskModalTitle">Agregar tarea</h3>
          </div>
          <div class="modal__body">
            <div class="form__group">
              <label for="taskTitle" class="form__label">TÃ­tulo</label>
              <input
                id="taskTitle"
                type="text"
                class="form__control"
                placeholder="Ej: Limpiar el baÃ±o"
              />
            </div>

            <div class="form__group">
              <label for="taskDesc" class="form__label">DescripciÃ³n</label>
              <textarea
                id="taskDesc"
                class="form__control form__textarea"
                placeholder="Detalles de la tarea"></textarea>
            </div>

            <div class="form__group">
              <label for="taskAssigned" class="form__label">Asignar a</label>
              <select id="taskAssigned" class="form__control form__select">
                <option value="">Seleccionar usuario</option>
                <!-- Las opciones se llenarÃ¡n con JavaScript -->
              </select>
            </div>

            <div class="form__group">
              <label for="taskPriority" class="form__label">Prioridad</label>
              <select id="taskPriority" class="form__control form__select">
                <option value="low">Baja</option>
                <option value="normal" selected>Normal</option>
                <option value="high">Alta</option>
                <option value="urgent">Urgente</option>
              </select>
            </div>

            <div class="form__group">
              <label class="form__label">Fecha lÃ­mite</label>
              <div class="date-time">
                <input id="taskDueDate" type="date" class="form__control" />
                <input id="taskDueTime" type="time" class="form__control" />
              </div>
            </div>
          </div>

          <div class="modal__buttons">
            <button class="btn btn--text" onclick="closeTaskModal()"
              >Cancelar</button
            >
            <button class="btn btn--primary" onclick="saveTask()"
              >Guardar</button
            >
          </div>
        </div>
      </div>

      <!-- Modal para editar fecha -->
      <div id="dateModal" class="modal">
        <div class="modal__content">
          <div class="modal__header">
            <h3 class="modal__title">Editar fecha lÃ­mite</h3>
          </div>
          <div class="modal__body">
            <p id="dateModalTaskTitle" class="form__label"></p>

            <div class="form__group">
              <label class="form__label">Nueva fecha</label>
              <div class="date--time">
                <input id="editDueDate" type="date" class="form__control" />
                <input id="editDueTime" type="time" class="form__control" />
              </div>
            </div>
          </div>

          <div class="button__group">
            <button class="btn btn--text" onclick="closeDateModal()"
              >Cancelar</button
            >
            <button class="btn btn--primary" onclick="updateTaskDate()"
              >Actualizar</button
            >
          </div>
        </div>
      </div>

      <!-- Modal de confirmaciÃ³n -->
      <div id="confirmModal" class="modal">
        <div class="modal__content modal__content--confirm">
          <h3 id="confirmModalTitle" class="modal__title">Confirmar acciÃ³n</h3>
          <p id="confirmModalMessage" class="modal__message">
            Â¿EstÃ¡s seguro que deseas realizar esta acciÃ³n?
          </p>

          <div class="modal__buttons">
            <button class="btn btn--cancel" onclick="closeConfirmModal()"
              >Cancelar</button
            >
            <button class="btn btn--confirm" onclick="executeConfirmedAction()"
              >Confirmar</button
            >
          </div>
        </div>
      </div>

      <!-- Modal para categorÃ­as -->
      <div id="categoryModal" class="modal">
        <div class="modal__content modal__content--category">
          <h3 class="modal__title">Gestionar categorÃ­as</h3>

          <div
            id="categories-list"
            class="category__list"
            style="margin-bottom: 1rem;"
          >
          </div>

          <button class="btn btn--primary" onclick="openNewCategoryModal()"
            >+ Nueva categorÃ­a</button
          >

          <div class="modal__buttons">
            <button class="btn btn--cancel" onclick="closeCategoryModal()"
              >Cerrar</button
            >
          </div>
        </div>
      </div>

      <!-- Modal para nueva categorÃ­a -->
      <div id="newCategoryModal" class="modal">
        <div class="modal__content modal__content--new-category">
          <h3 class="modal__title">Crear nueva categorÃ­a</h3>

          <label for="categoryName" class="form__label">Nombre</label>
          <input
            id="categoryName"
            type="text"
            placeholder="Nombre de la categorÃ­a"
            class="form__control"
          />

          <label for="categoryIcon" class="form__label">Icono</label>
          <input
            id="categoryIcon"
            type="text"
            placeholder="Ej: ð "
            maxlength="2"
            class="form__control"
          />

          <label for="categoryColor" class="form__label">Color</label>
          <input
            id="categoryColor"
            type="color"
            value="#7c5fff"
            class="form__control"
          />

          <div class="modal__buttons">
            <button class="btn btn--cancel" onclick="closeNewCategoryModal()"
              >Cancelar</button
            >
            <button class="btn btn--save" onclick="saveNewCategory()"
              >Guardar</button
            >
          </div>
        </div>
      </div>

      <script is:inline>
        // FunciÃ³n para abrir el modal de perfil

        // Generar lista de usuarios desde localStorage
        const username = localStorage.getItem("username") || "Usuario";
        const imagePath =
          localStorage.getItem("resultImagePath") ||
          "https://via.placeholder.com/150";
        const currentUserId = 1; // Puedes mantener este ID fijo si solo hay un usuario

        const users = [
          {
            id: currentUserId,
            name: username,
            image: imagePath,
          },
        ];

        // Datos iniciales
        let taskLists = JSON.parse(localStorage.getItem("taskLists")) || [];
        let categories = JSON.parse(localStorage.getItem("categories")) || [
          { name: "Trabajo", color: "#7c5fff", icon: "ð¼" },
          { name: "Estudio", color: "#4caf50", icon: "ð" },
          { name: "Personal", color: "#2196F3", icon: "ð¤" },
          { name: "Hogar", color: "#ffb300", icon: "ð " },
        ];
        let currentListIndex = null;
        let currentTaskIndex = null;
        let confirmAction = null;
        let confirmParams = null;

        // InicializaciÃ³n
        document.addEventListener("DOMContentLoaded", () => {
          renderLists();
          updateProfileCounters(); // <-- Agrega esta lÃ­nea
        });

        // FunciÃ³n para contar tareas por usuario
        function countUserTasks(userId) {
          let pending = 0;
          let completed = 0;

          taskLists.forEach((list) => {
            list.tasks.forEach((task) => {
              if (task.assignedUserId === userId) {
                if (task.completed) {
                  completed++;
                } else {
                  pending++;
                }
              }
            });
          });

          return { pending, completed };
        }

        // FunciÃ³n para actualizar los contadores en el perfil
        function updateProfileCounters() {
          const counts = countUserTasks(currentUserId);

          const pendingElement = document.getElementById("pending-tasks-count");
          const completedElement = document.getElementById(
            "completed-tasks-count"
          );

          if (pendingElement) pendingElement.textContent = counts.pending;
          if (completedElement) completedElement.textContent = counts.completed;
        }

        // Funciones para listas de tareas
        function renderLists() {
          const container = document.getElementById("lists-container");
          container.innerHTML = "";

          if (taskLists.length === 0) {
            container.innerHTML = `
      <div class="empty">
        <div class="empty__icon">ð</div>
        <h3 class="empty__title">Sin listas de tareas</h3>
        <p class="empty__desc">PresionÃ¡ el botÃ³n + para crear una nueva lista de tareas.</p>
      </div>
    `;
            return;
          }

          taskLists.forEach((list, index) => {
            const pendingTasks = list.tasks.filter((t) => !t.completed).length;
            const totalTasks = list.tasks.length;

            const listElement = document.createElement("div");
            listElement.className = "list";
            listElement.style.borderLeft = `4px solid ${list.category?.color || "#7c5fff"}`;

            listElement.innerHTML = `
      <div class="list__header">
        <span class="list__icon">${list.category?.icon || "ð"}</span>
        <h3 class="list__title">${list.title}</h3>
      </div>

      ${
        list.category
          ? `
        <div class="list__category">
          <span class="list__category-color" style="background: ${list.category.color}"></span>
          ${list.category.name}
        </div>
      `
          : ""
      }

      <div class="list__stats">
        <span class="list__stat list__stat--pending">${pendingTasks} pendientes</span>
        <span class="list__stat">${totalTasks} total</span>
      </div>
    `;

            listElement.addEventListener("click", () => showTasks(index));
            container.appendChild(listElement);
          });
        }

        function showTasks(listIndex) {
          currentListIndex = listIndex;
          document.getElementById("lists-container").style.display = "none";
          document.getElementById("tasks-container").style.display = "block";
          document.getElementById("current-list-name").textContent =
            taskLists[listIndex].title;
          renderTasks();
        }

        function showLists() {
          document.getElementById("lists-container").style.display = "grid";
          document.getElementById("tasks-container").style.display = "none";
          currentListIndex = null;
        }

        function openListModal(index = null) {
          currentListIndex = index;
          const modal = document.getElementById("listModal");
          document.getElementById("listModalTitle").innerText =
            index === null ? "Agregar lista de tareas" : "Editar lista";

          // Renderizar opciones de categorÃ­a
          renderCategoryOptions();

          if (index !== null) {
            const list = taskLists[index];
            document.getElementById("listTitle").value = list.title;
            document.getElementById("listDesc").value = list.desc || "";

            if (list.category) {
              document.getElementById("listCategory").value =
                list.category.name;
            }
          } else {
            document.getElementById("listTitle").value = "";
            document.getElementById("listDesc").value = "";
          }

          modal.style.display = "flex";
        }

        function renderCategoryOptions() {
          const select = document.getElementById("listCategory");
          select.innerHTML = categories
            .map(
              (cat) => `
        <option value="${cat.name}" data-color="${cat.color}" data-icon="${cat.icon}">
          ${cat.icon} ${cat.name}
        </option>
      `
            )
            .join("");

          if (
            currentListIndex !== null &&
            taskLists[currentListIndex].category
          ) {
            const currentCat = taskLists[currentListIndex].category;
            select.value = currentCat.name;
          }
        }

        function closeListModal() {
          document.getElementById("listModal").style.display = "none";
        }

        function saveTaskList() {
          const title = document.getElementById("listTitle").value.trim();
          if (!title) return alert("El nombre de la lista es requerido");

          const desc = document.getElementById("listDesc").value.trim();
          const categorySelect = document.getElementById("listCategory");
          const selectedOption =
            categorySelect.options[categorySelect.selectedIndex];

          const categoryData = {
            name: selectedOption.value,
            color: selectedOption.dataset.color,
            icon: selectedOption.dataset.icon,
          };

          if (currentListIndex !== null) {
            // Editar lista existente
            taskLists[currentListIndex] = {
              ...taskLists[currentListIndex],
              title,
              desc,
              category: categoryData,
            };
          } else {
            // Crear nueva lista
            taskLists.push({
              title,
              desc,
              category: categoryData,
              tasks: [],
              createdAt: new Date().toISOString(),
            });
          }

          saveData();
          renderLists();
          closeListModal();
        }

        function confirmDeleteList(index) {
          currentListIndex = index;
          showConfirm(
            "Eliminar lista",
            `Â¿EstÃ¡s seguro que deseas eliminar la lista "${taskLists[index].title}" y todas sus tareas?`,
            deleteList
          );
        }

        function deleteList() {
          taskLists.splice(currentListIndex, 1);
          saveData();
          renderLists();
          showLists();
          closeConfirmModal();
          updateProfileCounters(); // Actualizar contadores al eliminar lista
        }

        // Funciones para categorÃ­as
        function openCategoryModal() {
          renderCategoriesList();
          document.getElementById("categoryModal").style.display = "flex";
        }

        function closeCategoryModal() {
          document.getElementById("categoryModal").style.display = "none";
        }

        function openNewCategoryModal() {
          document.getElementById("newCategoryModal").style.display = "flex";
        }

        function closeNewCategoryModal() {
          document.getElementById("newCategoryModal").style.display = "none";
        }

        function renderCategoriesList() {
          const container = document.getElementById("categories-list");
          container.innerHTML = "";

          categories.forEach((cat, index) => {
            const catElement = document.createElement("div");
            catElement.style.display = "flex";
            catElement.style.alignItems = "center";
            catElement.style.marginBottom = "0.5rem";
            catElement.style.padding = "0.5rem";
            catElement.style.backgroundColor = "#2c2c2c";
            catElement.style.borderRadius = "5px";

            catElement.innerHTML = `
          <span style="margin-right: 0.5rem; font-size: 1.2rem;">${cat.icon}</span>
          <span style="flex-grow: 1;">${cat.name}</span>
          <span style="width: 20px; height: 20px; background-color: ${cat.color}; border-radius: 50%; margin-right: 0.5rem;"></span>
          <button onclick="deleteCategory(${index})" style="background: var(--danger); color: white; border: none; border-radius: 3px; padding: 0.2rem 0.5rem;">Eliminar</button>
        `;

            container.appendChild(catElement);
          });
        }

        function saveNewCategory() {
          const name = document.getElementById("categoryName").value.trim();
          if (!name) return alert("El nombre es requerido");

          const icon =
            document.getElementById("categoryIcon").value.trim() || "ð";
          const color = document.getElementById("categoryColor").value;

          categories.push({ name, icon, color });
          saveData();
          renderCategoryOptions();
          closeNewCategoryModal();
          renderCategoriesList();
        }

        function deleteCategory(index) {
          const categoryInUse = taskLists.some(
            (list) => list.category?.name === categories[index].name
          );

          if (categoryInUse) {
            alert(
              "No puedes eliminar esta categorÃ­a porque estÃ¡ en uso por alguna lista"
            );
            return;
          }

          categories.splice(index, 1);
          saveData();
          renderCategoryOptions();
          renderCategoriesList();
        }

        function renderTasks() {
          const container = document.getElementById("tasks-list");
          container.innerHTML = "";

          if (currentListIndex === null) return;

          const tasks = taskLists[currentListIndex].tasks;
          if (tasks.length === 0) {
            container.innerHTML = `
      <div class="empty">
        <div class="empty__icon">ðï¸</div>
        <h3 class="empty__title">No hay tareas en esta lista</h3>
        <p class="empty__desc">PodÃ©s agregar una nueva tarea con el botÃ³n de abajo.</p>
      </div>
    `;
            return;
          }

          const completedTasks = tasks.filter((t) => t.completed).length;
          const pendingTasks = tasks.length - completedTasks;

          tasks.forEach((task, index) => {
            const taskElement = document.createElement("div");
            taskElement.className = `task-item${task.completed ? " task-item--completed" : ""}`;

            const dueDate = task.dueDate ? new Date(task.dueDate) : null;
            const priorityText = {
              low: "Baja",
              normal: "Normal",
              high: "Alta",
              urgent: "Urgente",
            }[task.priority || "normal"];

            const assignedUser = task.assignedUserId
              ? users.find((u) => u.id === task.assignedUserId)
              : null;

            const canToggle = task.assignedUserId === currentUserId;
            const checkboxDisabled = !canToggle ? "disabled" : "";
            const checkboxTitle = !canToggle
              ? 'title="Solo el usuario asignado puede marcar esta tarea como completada"'
              : "";

            let assignedHtml = "";
            const user = users.find((u) => u.id === task.assignedUserId);
            if (user) {
              assignedHtml = `
    <span class="task__assigned">
      <img src="${user.image}" alt="${user.name}" class="user-avatar-small" />
      ${user.name}
    </span>
  `;
            }

            taskElement.innerHTML = `
      <div class="task-item__header">
        <input type="checkbox" class="task-item__checkbox"
               ${task.completed ? "checked" : ""}
               ${checkboxDisabled}
               ${checkboxTitle}
               data-index="${index}">
        <h4 class="task-item__title">${task.title}</h4>
        <span class="task-item__priority task-item__priority--${task.priority || "normal"}">${priorityText}</span>
      </div>

      ${task.desc ? `<p class="task-item__desc">${task.desc}</p>` : ""}

      <div class="task-item__meta">
        <div class="task-item__info">
          ${
            assignedUser
              ? `
            <span class="task-item__assigned">
              ${assignedUser.name}
            </span>`
              : ""
          }
          ${
            dueDate
              ? `
            <span class="task-item__due-date">
              ð ${dueDate.toLocaleDateString()} 
              ${dueDate.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
            </span>`
              : ""
          }
        </div>
        <div>
          <small class="task-item__created">${new Date(task.createdAt).toLocaleDateString()}</small>
        </div>
      </div>

      <div class="task-item__actions">
        <button class="btn btn--text" onclick="openDateModal(${index})">ð Fecha</button>
        <button class="btn btn--text" onclick="editTask(${index})">âï¸ Editar</button>
        <button class="btn btn--text" onclick="confirmDeleteTask(${index})">â Eliminar</button>
      </div>
    `;

            if (canToggle) {
              const checkbox = taskElement.querySelector(
                ".task-item__checkbox"
              );
              checkbox.addEventListener("change", function () {
                const taskIndex = parseInt(this.getAttribute("data-index"));
                toggleTaskCompletion(taskIndex);
              });
            }

            container.appendChild(taskElement);
          });
        }

        function toggleTaskCompletion(index) {
          const task = taskLists[currentListIndex].tasks[index];
          task.completed = !task.completed;
          saveData();
          renderTasks();
          updateProfileCounters();
        }
        function toggleTaskCompletion(index) {
          const task = taskLists[currentListIndex].tasks[index];
          task.completed = !task.completed;
          saveData();
          renderTasks();
          updateProfileCounters();
        }

        function openTaskModal(index = null) {
          currentTaskIndex = index;
          const modal = document.getElementById("taskModal");
          document.getElementById("taskModalTitle").innerText =
            index === null ? "Agregar tarea" : "Editar tarea";

          renderUserOptions();

          if (index !== null) {
            const task = taskLists[currentListIndex].tasks[index];
            document.getElementById("taskTitle").value = task.title;
            document.getElementById("taskDesc").value = task.desc || "";
            document.getElementById("taskAssigned").value =
              document.getElementById("taskPriority").value =
                task.priority || "normal";

            if (task.dueDate) {
              const dueDate = new Date(task.dueDate);
              document.getElementById("taskDueDate").value = dueDate
                .toISOString()
                .split("T")[0];
              document.getElementById("taskDueTime").value = dueDate
                .toTimeString()
                .substring(0, 5);
            } else {
              document.getElementById("taskDueDate").value = "";
              document.getElementById("taskDueTime").value = "";
            }
          } else {
            document.getElementById("taskTitle").value = "";
            document.getElementById("taskDesc").value = "";
            document.getElementById("taskAssigned").value = "";
            document.getElementById("taskPriority").value = "normal";

            const now = new Date();
            document.getElementById("taskDueDate").value = now
              .toISOString()
              .split("T")[0];
            document.getElementById("taskDueTime").value = now
              .toTimeString()
              .substring(0, 5);
          }

          modal.style.display = "flex";
        }

        function editTask(index) {
          openTaskModal(index);
        }

        function closeTaskModal() {
          document.getElementById("taskModal").style.display = "none";
        }

        function saveTask() {
          const title = document.getElementById("taskTitle").value.trim();
          if (!title) return alert("El tÃ­tulo de la tarea es requerido");

          const desc = document.getElementById("taskDesc").value.trim();
          const assignedUserIdRaw = document.getElementById("taskAssigned").value;
          const assignedUserId = assignedUserIdRaw ? parseInt(assignedUserIdRaw) : null;
          const priority = document.getElementById("taskPriority").value;

          const dueDate = document.getElementById("taskDueDate").value;
          const dueTime = document.getElementById("taskDueTime").value;
          const dueDateTime =
            dueDate && dueTime
              ? new Date(`${dueDate}T${dueTime}`).toISOString()
              : null;

          const taskData = {
            title,
            desc,
            assignedUserId,
            priority,
            dueDate: dueDateTime,
            completed: false,
            createdAt: new Date().toISOString(),
          };

          if (currentTaskIndex !== null) {
            taskLists[currentListIndex].tasks[currentTaskIndex] = {
              ...taskLists[currentListIndex].tasks[currentTaskIndex],
              ...taskData,
            };
          } else {
            taskLists[currentListIndex].tasks.push(taskData);
          }

          saveData();
          renderTasks();
          closeTaskModal();
          updateProfileCounters();
        }

        function openDateModal(index) {
          currentTaskIndex = index;
          const task = taskLists[currentListIndex].tasks[index];

          document.getElementById("dateModalTaskTitle").innerText = task.title;

          if (task.dueDate) {
            const dueDate = new Date(task.dueDate);
            document.getElementById("editDueDate").value = dueDate
              .toISOString()
              .split("T")[0];
            document.getElementById("editDueTime").value = dueDate
              .toTimeString()
              .substring(0, 5);
          } else {
            const now = new Date();
            document.getElementById("editDueDate").value = now
              .toISOString()
              .split("T")[0];
            document.getElementById("editDueTime").value = now
              .toTimeString()
              .substring(0, 5);
          }

          document.getElementById("dateModal").style.display = "flex";
        }

        function closeDateModal() {
          document.getElementById("dateModal").style.display = "none";
        }

        function updateTaskDate() {
          const dueDate = document.getElementById("editDueDate").value;
          const dueTime = document.getElementById("editDueTime").value;

          if (dueDate && dueTime) {
            taskLists[currentListIndex].tasks[currentTaskIndex].dueDate =
              new Date(`${dueDate}T${dueTime}`).toISOString();
            saveData();
            renderTasks();
          }

          closeDateModal();
        }

        function confirmDeleteTask(index) {
          currentTaskIndex = index;
          const task = taskLists[currentListIndex].tasks[index];

          showConfirm(
            "Eliminar tarea",
            `Â¿EstÃ¡s seguro que deseas eliminar la tarea "${task.title}"?`,
            deleteTask
          );
        }

        function deleteTask() {
          taskLists[currentListIndex].tasks.splice(currentTaskIndex, 1);
          saveData();
          renderTasks();
          closeConfirmModal();
          updateProfileCounters(); // Actualizar contadores al eliminar tarea
        }

        function showConfirm(title, message, action, params = null) {
          document.getElementById("confirmModalTitle").innerText = title;
          document.getElementById("confirmModalMessage").innerText = message;
          confirmAction = action;
          confirmParams = params;
          document.getElementById("confirmModal").style.display = "flex";
        }

        function closeConfirmModal() {
          document.getElementById("confirmModal").style.display = "none";
        }

        function executeConfirmedAction() {
          if (confirmAction) {
            confirmAction();
            closeConfirmModal();
          }
        }

        function confirmDeleteAll() {
          showConfirm(
            "Eliminar todas las tareas",
            "Â¿EstÃ¡s seguro que deseas eliminar TODAS las listas y tareas? Esta acciÃ³n no se puede deshacer.",
            deleteAll
          );
        }

        function deleteAll() {
          taskLists = [];
          saveData();
          renderLists();
          showLists();
          updateProfileCounters(); // Actualizar contadores al eliminar todo
        }

        function saveData() {
          localStorage.setItem("taskLists", JSON.stringify(taskLists));
          localStorage.setItem("categories", JSON.stringify(categories));

          updateWeeklyGoal();
          renderUsersSummary();
        }

        window.onclick = function (event) {
          if (event.target.className === "modal") {
            document.querySelectorAll(".modal").forEach((modal) => {
              modal.style.display = "none";
            });
          }
        };

        function openProfileModal() {
          updateProfileCounters(); // Actualizar contadores al abrir el perfil
          document.getElementById("profileModal").style.display = "flex";
        }

        function closeProfileModal() {
          document.getElementById("profileModal").style.display = "none";
        }

        function logout() {
          alert("SesiÃ³n cerrada");
          closeProfileModal();
        }

        function renderUserOptions() {
          const select = document.getElementById("taskAssigned");
          select.innerHTML = '<option value="">Seleccionar usuario</option>';

          // Mostrar todos los usuarios del array users
          users.forEach((user) => {
            const option = document.createElement("option");
            option.value = user.id;
            option.textContent = user.name;
            select.appendChild(option);
          });

          if (currentTaskIndex !== null) {
            const task = taskLists[currentListIndex].tasks[currentTaskIndex];
            if (task.assignedUserId) {
              select.value = task.assignedUserId;
            }
          }
        }

        function updateWeeklyGoal() {
          const goal = 5; // Objetivo semanal
          const completed = countAllCompletedTasks();
          const progress = Math.min(100, (completed / goal) * 100);

          document.getElementById("goal-progress").style.width = `${progress}%`;
        }

        function countAllCompletedTasks() {
          let total = 0;
          taskLists.forEach((list) => {
            total += list.tasks.filter((task) => task.completed).length;
          });
          return total;
        }

        function renderUsersSummary() {
          const container = document.getElementById("users-summary-body");
          if (!container) return;
          container.innerHTML = "";

          users.forEach((user) => {
            const counts = countUserTasks(user.id);
            const totalTasks = counts.pending + counts.completed;
            const progress =
              totalTasks > 0 ? (counts.completed / totalTasks) * 100 : 0;

            const row = document.createElement("tr");
            row.innerHTML = `
      <td>
        <img src="${user.image}" alt="${user.name}" class="user-avatar-small">
        ${user.name}
      </td>
      <td>${counts.pending}</td>
      <td>${counts.completed}</td>
      <td>
        <div class="user-progress">
          <div class="user-progress-bar" style="width: ${progress}%"></div>
        </div>
        ${Math.round(progress)}%
      </td>
    `;
            container.appendChild(row);
          });
        }
        document.addEventListener("DOMContentLoaded", () => {
          const username = localStorage.getItem("username");
          const imagePath = localStorage.getItem("resultImagePath");

          const nameElement = document.getElementById("profile-name");
          const imageElement = document.getElementById("profile-img");
          const headerImg = document.getElementById("header-profile-img");

          if (username && nameElement) {
            nameElement.textContent = username;
          }

          if (imagePath) {
            if (imageElement) imageElement.src = imagePath;
            if (headerImg) headerImg.src = imagePath;
          }
        });
      </script>
    </div>
  </body>
</html>
