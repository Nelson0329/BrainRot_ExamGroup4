---
const { questions, results } = Astro.props;
---


<div id="quiz-container"
    data-questions={JSON.stringify(questions)}  
    data-results={JSON.stringify(results)}      
>
  <div id="quiz-box">
    <h2 id="question-text"></h2>
    <div id="options-container"></div>
    <button id="next-button">Siguiente Pregunta</button>
</div>    
    <div id="result-container">
        <h3 id="result-title"></h3>
        <p id="result-description"></p>
        <div id="result-image-container">
        </div>
        <div id="result-buttons">
            <button id="restart-button" onclick="location.reload()">Volver a Jugar</button>
            <button id="home-button" onclick="window.location.href='/home'"> Ir a inicio</button>        
        </div>
    </div>
</div>

<style>
  :root {
    --primary-bg: #2a2a2a;
    --secondary-bg: #3a3a3a;
    --text-light: #e0e0e0;
    --text-medium: #b0b0b0;
    --accent-color: #7f52f3;
    --accent-hover: #6a44d0;
    --button-default-bg: #4a4a4a;
    --button-default-hover-bg: #5a5a5a;
    --selected-option-bg: var(--accent-color);
    --selected-option-border: var(--accent-hover);
    --disabled-bg: #353535;
    --disabled-text: #606060;
    --border-color-subtle: #444444;
  }

  #quiz-container {
    max-width: 650px;
    width: 92%;
    margin: 2rem auto;
    padding: 3rem 2.5rem;
    background-color: var(--primary-bg);
    border-radius: 18px;
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
    text-align: center;
    border: 1px solid var(--border-color-subtle);
    transition: transform 0.3s ease-out;
  }
  #quiz-container:hover {
    transform: translateY(-8px);
  }

  #question-text {
    font-size: 1.9rem;
    margin-bottom: 2.5rem;
    color: var(--text-light);
    min-height: 70px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0 1.5rem;
    font-weight: 600;
    line-height: 1.3;
  }

  #options-container {
    display: flex;
    flex-direction: column;
    gap: 1.2rem;
    margin-bottom: 2rem;
  }
  #options-container button {
    width: 100%;
    padding: 1.4rem 1.8rem;
    font-size: 1.2rem;
    background-color: var(--button-default-bg);
    color: var(--text-light);
    border: none;
    border-radius: 12px;
    cursor: pointer;
    transition:
      background-color 0.3s ease,
      transform 0.2s ease,
      box-shadow 0.2s ease;
    text-align: left;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
    font-weight: 500;
  }
  #options-container button:hover {
    background-color: var(--button-default-hover-bg);
    transform: translateY(-4px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);
  }
  #options-container button:disabled {
    background-color: var(--disabled-bg);
    color: var(--disabled-text);
    cursor: not-allowed;
    box-shadow: none;
    transform: none;
  }
  #options-container button.selected {
    background-color: var(--selected-option-bg);
    border: 2px solid var(--selected-option-border);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  #next-button,
  #restart-button,
  #home-button {
    padding: 1rem 2.2rem;
    font-size: 1.15rem;
    background-color: var(--accent-color);
    color: white;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    margin-top: 2.5rem;
    transition:
      background-color 0.3s ease,
      transform 0.2s ease,
      box-shadow 0.2s ease;
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.2);
    font-weight: 600;
  }

  #next-button:hover,
  #restart-button:hover,
  #home-button:hover {
    background-color: var(--accent-hover);
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
  }

  #result-buttons {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  #result-container {
    margin-top: 3rem;
    padding-top: 2.5rem;
    border-top: 1px solid var(--border-color-subtle);
    animation: fadeIn 1s ease-out;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  #result-title {
    font-size: 3rem;
    color: var(--accent-color);
    margin-bottom: 1.5rem;
    text-transform: uppercase;
    letter-spacing: 3px;
    font-weight: 700;
    text-align: center;
    justify-content: center;
    align-items: center;
    text-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    width: 100%;
  }
  #result-description {
    font-size: 1.4rem;
    color: var(--text-medium);
    margin-bottom: 3rem;
    line-height: 1.7;
    padding: 0 1.5rem;
    align-items: center;
    justify-content: center;
    text-align: center;
    width: 95%;
    justify-self: center;
  }

  #result-image-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-bottom: 2rem;
  }

  #result-image {
    border: 5px solid var(--accent-color);
    border-radius: 15px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.25);
    display: block;
    margin: 0 auto;
    width: 100%;
    max-width: 400px;
    height: auto;
  }

  /* Tablet (≤ 768px) */
  @media (max-width: 768px) {
    #quiz-container {
      padding: 1.5rem 1rem;
      margin: 1rem auto;
      width: 98vw;
      max-width: 98vw;
    }
    #question-text {
      font-size: 1.3rem;
      min-height: 60px;
      padding: 0 0.5rem;
    }
    #options-container button {
      font-size: 1rem;
      padding: 1rem 1rem;
      border-radius: 10px;
    }
    #next-button,
    #restart-button,
    #home-button {
      font-size: 1rem;
      padding: 0.7rem 1.2rem;
      margin-top: 1.5rem;
      border-radius: 10px;
    }
    #result-title {
      font-size: 2rem;
    }
    #result-description {
      font-size: 1.05rem;
      padding: 0 0.5rem;
    }
    #result-image {
      max-width: 220px;
    }
    #result-buttons {
      flex-direction: column;
      gap: 0.7rem;
    }
  }

/* Tablet (≤ 768px) */
  @media (max-width: 768px) {
    #quiz-container {
      padding: 1.5rem 1rem;
      margin: 1rem auto;
      width: 98vw;
      max-width: 98vw;
    }
    #question-text {
      font-size: 1.3rem;
      min-height: 60px;
      padding: 0 0.5rem;
    }
    #options-container button {
      font-size: 1rem;
      padding: 1rem 1rem;
      border-radius: 10px;
    }
    #next-button,
    #restart-button,
    #home-button {
      font-size: 1rem;
      padding: 0.7rem 1.2rem;
      margin-top: 1.5rem;
      border-radius: 10px;
    }
    #result-title {
      font-size: 2rem;
    }
    #result-description {
      font-size: 1.05rem;
      padding: 0 0.5rem;
    }
    #result-image {
      max-width: 220px;
    }
    #result-buttons {
      flex-direction: column;
      gap: 0.7rem;
    }
  }

  /* Celular (≤ 480px) */
  @media (max-width: 480px) {
    #quiz-container {
      padding: 0.7rem 0.2rem;
      margin: 0.5rem auto;
      border-radius: 10px;
      width: 100vw;
      max-width: 100vw;
    }
    #question-text {
      font-size: 1rem;
      min-height: 40px;
      padding: 0 0.2rem;
    }
    #options-container {
      gap: 0.7rem;
    }
    #options-container button {
      font-size: 0.85rem;
      padding: 0.6rem 0.5rem;
      border-radius: 7px;
    }
    #next-button,
    #restart-button,
    #home-button {
      font-size: 0.85rem;
      padding: 0.5rem 0.7rem;
      margin-top: 1rem;
      border-radius: 7px;
    }
    #result-title {
      font-size: 1.2rem;
      letter-spacing: 1px;
    }
    #result-description {
      font-size: 0.9rem;
      padding: 0 0.2rem;
    }
    #result-image {
      max-width: 140px;
      border-radius: 8px;
    }
    #result-buttons {
      flex-direction: column;
      gap: 0.5rem;
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  // Obtenemos el elemento quiz-container para acceder a los datos:
  const quizContainer = document.getElementById("quiz-container");

  // Usamos el operador lógico OR para proporcionar un array vacío en el caso de que el atributo no exista:
  const questions = JSON.parse(quizContainer.dataset.questions || "[]");
  const results = JSON.parse(quizContainer.dataset.results || "[]");

  let currentQuestionIndex = 0;
  let totalScore = 0;
  let selectedOptionButton = null;

  // Constantes para obtener referencias a los elementos del DOM:
  const questionText = document.getElementById("question-text");
  const optionsContainer = document.getElementById("options-container");
  const nextButton = document.getElementById("next-button");
  const restartButton = document.getElementById("restart-button");
  const resultContainer = document.getElementById("result-container");
  const resultTitle = document.getElementById("result-title");
  const resultDescription = document.getElementById("result-description");
  const resultImage = document.getElementById("result-image");
  const resultImageContainer = document.getElementById(
    "result-image-container"
  );
  const quizBox = document.getElementById("quiz-box");

    // Función para cargar la pregunta actual en la interfaz:
    function loadQuestion() {
        if (!questionText || !optionsContainer || !quizContainer || !resultContainer || !restartButton || !nextButton) {
            console.error("Error: Algunos elementos del DOM no se encontraron. Asegúrate de que los IDs sean correctos.");
            return; 
        }

    if (currentQuestionIndex < questions.length) {
      quizContainer.style.display = "block";
      resultContainer.style.display = "none";
      restartButton.style.display = "none";

      const currentQuestion = questions[currentQuestionIndex];
      questionText.textContent = currentQuestion.question;
      optionsContainer.innerHTML = "";
      selectedOptionButton = null;

      currentQuestion.options.forEach((option) => {
        const button = document.createElement("button");
        button.textContent = option.text;
        button.classList.add("option-button");
        button.dataset.score = String(option.score);
        button.onclick = () => selectOption(button);
        optionsContainer.appendChild(button);
      });

      nextButton.style.display = "none";
    } else {
      showResult();
    }
  }

  // Función para manejar la selección de una opción:
  function selectOption(clickedButton) {
    if (selectedOptionButton) {
      selectedOptionButton.classList.remove("selected");
    }

    clickedButton.classList.add("selected");
    selectedOptionButton = clickedButton;

    disableOptions(true);
    nextButton.style.display = "block";
  }

  // Función para habilitar/deshabilitar los botones de opción:
  function disableOptions(disabled) {
    const optionButtons = optionsContainer.querySelectorAll(".option-button");
    optionButtons.forEach((button) => {
      if (button instanceof HTMLButtonElement) {
        button.disabled = disabled;
      }
    });
  }

  // Función para avanzar a la siguiente pregunta:
  function nextQuestion() {
    if (
      selectedOptionButton &&
      selectedOptionButton.dataset.score !== undefined
    ) {
      // Verificamos que .dataset.score exista
      totalScore += parseInt(selectedOptionButton.dataset.score);
      currentQuestionIndex++;
      loadQuestion();
    } else {
      alert("Por favor, selecciona una opción antes de continuar.");
    }
  }

  // Función para mostrar el resultado final (se agregaron DEBUGs para verificar el flujo):
  function showResult() {
    console.log("--- showResult() llamado ---"); // DEBUG 1

    // Verificación de elementos:
    console.log("Elementos DOM:", {
      resultTitle: !!resultTitle,
      resultDescription: !!resultDescription,
      resultImage: !!resultImage,
      quizContainer: !!quizContainer,
      resultContainer: !!resultContainer,
      restartButton: !!restartButton,
    });

    console.log("Ocultando quizContainer..."); // DEBUG 4
    quizBox.style.display = "none";

    console.log("Mostrando resultContainer..."); // DEBUG 5
    resultContainer.style.setProperty("display", "block", "important");

    console.log("Mostrando restartButton..."); // DEBUG 6
    restartButton.style.display = "block";

    const finalResult = results.find(
      (r) => totalScore >= r.minScore && totalScore <= r.maxScore
    );
    console.log("Buscando resultado final para el score:", totalScore); // DEBUG 7
    console.log("Resultados disponibles:", finalResult); // DEBUG 8

    if (finalResult) {
      console.log("Resultado final encontrado:", finalResult); // DEBUG 3
      resultContainer.style.display = "block";
      resultTitle.textContent = finalResult.name;
      resultDescription.textContent = finalResult.description;
      console.log("finalResult encontrado:", finalResult);
      console.log("Ruta de imagen a cargar:", finalResult.imagePath);

      //probando si se guarda en localStorage

      localStorage.setItem("resultImagePath", finalResult.imagePath);

      resultImageContainer.innerHTML = `
                <img id="result-image" src="${finalResult.imagePath}" alt="${finalResult.name}" style="max-width: 300px; height: auto; border-radius: 8px; display: block;">
            `;
      restartButton.style.display = "block";
    } else {
      console.warn(
        "No se encontró un resultado final para el score:",
        totalScore
      ); // DEBUG 7
      resultTitle.textContent = "Error al calcular tu Brainrot.";
      resultDescription.textContent =
        "No se encontró un resultado para tu puntuación. Esto no debería pasar, ¡intenta de nuevo!";
      resultImage.src = "";
    }
    console.log("--- Fin de showResult() ---"); // DEBUG 8
  }

  // Función para reiniciar el quiz:
  function restartQuiz() {
    currentQuestionIndex = 0;
    totalScore = 0;
    selectedOptionButton = null;
    loadQuestion();
  }

  // Asignación de eventos a los botones:
  if (nextButton && restartButton) {
    nextButton.addEventListener("click", nextQuestion);
    restartButton.addEventListener("click", restartQuiz);
  } else {
    console.error("Error: Los botones de navegación no se encontraron.");
  }

  // Para iniciar el quiz después de un pequeño retraso de 50ms:
  setTimeout(loadQuestion, 50);
</script>
